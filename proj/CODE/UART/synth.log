
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: UART.sv
Parsing SystemVerilog input from `UART.sv' to AST representation.
Generating RTLIL representation for module `\UART'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \UART_synth

2.2. Analyzing design hierarchy..
Top module:  \UART_synth
Removing unused module `\UART'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \UART_synth

3.1.2. Analyzing design hierarchy..
Top module:  \UART_synth
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 8 switch rules as full_case in process $proc$UART.sv:26$1 in module UART_synth.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\UART_synth.$proc$UART.sv:20$14'.
  Set init value: \curr_state = 3'000
Found init rule in `\UART_synth.$proc$UART.sv:21$15'.
  Set init value: \r_clock_count = 8'00000000
Found init rule in `\UART_synth.$proc$UART.sv:22$16'.
  Set init value: \r_bit_index = 3'000
Found init rule in `\UART_synth.$proc$UART.sv:23$17'.
  Set init value: \r_Tx_data = 8'00000000

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\UART_synth.$proc$UART.sv:26$1'.
     1/9: $0\r_Tx_data[7:0]
     2/9: $0\r_bit_index[2:0]
     3/9: $0\r_clock_count[7:0]
     4/9: $0\curr_state[2:0]
     5/9: $0\o_data_recieved[0:0]
     6/9: $0\o_ready[0:0]
     7/9: $0\o_data_sent[0:0]
     8/9: $0\o_Tx_serial[0:0]
     9/9: $0\o_Tx_active[0:0]
Creating decoders for process `\UART_synth.$proc$UART.sv:20$14'.
     1/1: $1\curr_state[2:0]
Creating decoders for process `\UART_synth.$proc$UART.sv:21$15'.
     1/1: $1\r_clock_count[7:0]
Creating decoders for process `\UART_synth.$proc$UART.sv:22$16'.
     1/1: $1\r_bit_index[2:0]
Creating decoders for process `\UART_synth.$proc$UART.sv:23$17'.
     1/1: $1\r_Tx_data[7:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\UART_synth.\o_Tx_active' using process `\UART_synth.$proc$UART.sv:26$1'.
  created $dff cell `$procdff$138' with positive edge clock.
Creating register for signal `\UART_synth.\o_Tx_serial' using process `\UART_synth.$proc$UART.sv:26$1'.
  created $dff cell `$procdff$139' with positive edge clock.
Creating register for signal `\UART_synth.\o_data_sent' using process `\UART_synth.$proc$UART.sv:26$1'.
  created $dff cell `$procdff$140' with positive edge clock.
Creating register for signal `\UART_synth.\o_ready' using process `\UART_synth.$proc$UART.sv:26$1'.
  created $dff cell `$procdff$141' with positive edge clock.
Creating register for signal `\UART_synth.\o_data_recieved' using process `\UART_synth.$proc$UART.sv:26$1'.
  created $dff cell `$procdff$142' with positive edge clock.
Creating register for signal `\UART_synth.\curr_state' using process `\UART_synth.$proc$UART.sv:26$1'.
  created $dff cell `$procdff$143' with positive edge clock.
Creating register for signal `\UART_synth.\r_clock_count' using process `\UART_synth.$proc$UART.sv:26$1'.
  created $dff cell `$procdff$144' with positive edge clock.
Creating register for signal `\UART_synth.\r_bit_index' using process `\UART_synth.$proc$UART.sv:26$1'.
  created $dff cell `$procdff$145' with positive edge clock.
Creating register for signal `\UART_synth.\r_Tx_data' using process `\UART_synth.$proc$UART.sv:26$1'.
  created $dff cell `$procdff$146' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 8 empty switches in `\UART_synth.$proc$UART.sv:26$1'.
Removing empty process `UART_synth.$proc$UART.sv:26$1'.
Removing empty process `UART_synth.$proc$UART.sv:20$14'.
Removing empty process `UART_synth.$proc$UART.sv:21$15'.
Removing empty process `UART_synth.$proc$UART.sv:22$16'.
Removing empty process `UART_synth.$proc$UART.sv:23$17'.
Cleaned up 8 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.
<suppressed ~10 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..
Removed 0 unused cells and 37 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module UART_synth..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
<suppressed ~81 debug messages>
Removed a total of 27 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_synth..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_synth.
    New ctrl vector for $pmux cell $procmux$29: { $procmux$121_CMP $auto$opt_reduce.cc:132:opt_mux$148 }
    New ctrl vector for $pmux cell $procmux$43: { $procmux$125_CMP $procmux$121_CMP $procmux$112_CMP $auto$opt_reduce.cc:132:opt_mux$150 }
    New ctrl vector for $pmux cell $procmux$107: { $procmux$112_CMP $auto$opt_reduce.cc:132:opt_mux$152 }
    New ctrl vector for $pmux cell $procmux$115: { $procmux$125_CMP $procmux$121_CMP $auto$opt_reduce.cc:132:opt_mux$154 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$147: { $procmux$101_CMP $procmux$105_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$149: { $procmux$101_CMP $procmux$105_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$151: { $procmux$101_CMP $procmux$105_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$153: { $procmux$101_CMP $procmux$105_CMP $procmux$112_CMP }
  Optimizing cells in module \UART_synth.
Performed a total of 8 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_synth..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_synth.
    New ctrl vector for $pmux cell $procmux$43: { $auto$opt_reduce.cc:132:opt_mux$156 $procmux$112_CMP $auto$opt_reduce.cc:132:opt_mux$148 }
  Optimizing cells in module \UART_synth.
Performed a total of 1 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_synth..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_synth.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
Removed a total of 0 cells.

3.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..

3.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 bits (of 32) from port B of cell UART_synth.$lt$UART.sv:105$10 ($lt).
Removed top 31 bits (of 32) from port B of cell UART_synth.$add$UART.sv:106$11 ($add).
Removed top 29 bits (of 32) from port Y of cell UART_synth.$add$UART.sv:106$11 ($add).
Removed top 31 bits (of 32) from port B of cell UART_synth.$lt$UART.sv:129$12 ($lt).
Removed top 31 bits (of 32) from port B of cell UART_synth.$add$UART.sv:130$13 ($add).
Removed top 24 bits (of 32) from port Y of cell UART_synth.$add$UART.sv:130$13 ($add).
Removed top 2 bits (of 3) from mux cell UART_synth.$procmux$73 ($mux).
Removed top 2 bits (of 3) from mux cell UART_synth.$procmux$76 ($mux).
Removed top 2 bits (of 3) from mux cell UART_synth.$procmux$78 ($mux).
Removed top 1 bits (of 3) from mux cell UART_synth.$procmux$83 ($mux).
Removed top 1 bits (of 3) from mux cell UART_synth.$procmux$85 ($mux).
Removed top 2 bits (of 3) from mux cell UART_synth.$procmux$89 ($mux).
Removed top 1 bits (of 3) from port B of cell UART_synth.$procmux$112_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell UART_synth.$procmux$121_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell UART_synth.$procmux$125_CMP0 ($eq).
Removed top 29 bits (of 32) from wire UART_synth.$add$UART.sv:106$11_Y.
Removed top 24 bits (of 32) from wire UART_synth.$add$UART.sv:130$13_Y.
Removed top 2 bits (of 3) from wire UART_synth.$procmux$73_Y.
Removed top 2 bits (of 3) from wire UART_synth.$procmux$76_Y.
Removed top 2 bits (of 3) from wire UART_synth.$procmux$78_Y.
Removed top 1 bits (of 3) from wire UART_synth.$procmux$83_Y.
Removed top 1 bits (of 3) from wire UART_synth.$procmux$85_Y.

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~100 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module UART_synth:
  creating $macc model for $add$UART.sv:106$11 ($add).
  creating $macc model for $add$UART.sv:130$13 ($add).
  creating $alu model for $macc $add$UART.sv:130$13.
  creating $alu model for $macc $add$UART.sv:106$11.
  creating $alu model for $lt$UART.sv:105$10 ($lt): new $alu
  creating $alu model for $lt$UART.sv:129$12 ($lt): new $alu
  creating $alu cell for $lt$UART.sv:129$12: $auto$alumacc.cc:474:replace_alu$166
  creating $alu cell for $lt$UART.sv:105$10: $auto$alumacc.cc:474:replace_alu$177
  creating $alu cell for $add$UART.sv:106$11: $auto$alumacc.cc:474:replace_alu$182
  creating $alu cell for $add$UART.sv:130$13: $auto$alumacc.cc:474:replace_alu$185
  created 4 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.
<suppressed ~9 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_synth..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_synth.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$169: { $auto$alumacc.cc:490:replace_alu$167 [0] $auto$alumacc.cc:490:replace_alu$167 [1] $auto$alumacc.cc:490:replace_alu$167 [2] $auto$alumacc.cc:490:replace_alu$167 [3] $auto$alumacc.cc:490:replace_alu$167 [4] $auto$alumacc.cc:490:replace_alu$167 [5] $auto$alumacc.cc:490:replace_alu$167 [6] $auto$alumacc.cc:490:replace_alu$167 [7] }
  Optimizing cells in module \UART_synth.
Performed a total of 1 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..
Removed 2 unused cells and 5 unused wires.
<suppressed ~3 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_synth..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_synth.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking UART_synth.curr_state as FSM state register:
    Register has an initialization value.

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.
<suppressed ~6 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_synth..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_synth.
    Consolidated identical input bits for $mux cell $procmux$67:
      Old ports: A=3'011, B=3'100, Y=$procmux$67_Y
      New ports: A=2'01, B=2'10, Y={ $procmux$67_Y [2] $procmux$67_Y [0] }
      New connections: $procmux$67_Y [1] = $procmux$67_Y [0]
  Optimizing cells in module \UART_synth.
Performed a total of 1 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.

3.20.9. Rerunning OPT passes. (Maybe there is more to do..)

3.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UART_synth..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

3.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UART_synth.
Performed a total of 0 changes.

3.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
Removed a total of 0 cells.

3.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..

3.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.

3.20.16. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$1297efc30c1e19551d1f4e269f2cbfa7dd15f801\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=4 for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
No more expansions possible.
<suppressed ~612 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.
<suppressed ~168 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
<suppressed ~87 debug messages>
Removed a total of 29 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..
Removed 35 unused cells and 303 unused wires.
<suppressed ~36 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\UART_synth' to `<abc-temp-dir>/input.blif'..
Extracted 194 gates and 234 wires to a netlist network with 38 inputs and 27 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       26
ABC RESULTS:              AOI3 cells:        3
ABC RESULTS:               MUX cells:       43
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        6
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        6
ABC RESULTS:             ORNOT cells:       15
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:      169
ABC RESULTS:           input signals:       38
ABC RESULTS:          output signals:       27
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UART_synth.
<suppressed ~5 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UART_synth'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..
Removed 34 unused cells and 166 unused wires.
<suppressed ~35 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \UART_synth

3.25.2. Analyzing design hierarchy..
Top module:  \UART_synth
Removed 0 unused modules.

3.26. Printing statistics.

=== UART_synth ===

   Number of wires:                 85
   Number of wire bits:            121
   Number of public wires:          14
   Number of public wire bits:      39
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $_ANDNOT_                      17
     $_AND_                          3
     $_AOI3_                         3
     $_DFF_P_                       19
     $_MUX_                         35
     $_NAND_                         2
     $_NOT_                          6
     $_OAI3_                         2
     $_ORNOT_                        7
     $_OR_                           5
     $_XNOR_                         1
     $_XOR_                          1

3.27. Executing CHECK pass (checking for obvious problems).
checking module UART_synth..
found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `\UART_synth' to `<abc-temp-dir>/input.blif'..
Extracted 82 gates and 112 wires to a netlist network with 30 inputs and 19 outputs.

4.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       56
ABC RESULTS:               NOT cells:       11
ABC RESULTS:                OR cells:       38
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:       63
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       19
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UART_synth..
Removed 0 unused cells and 112 unused wires.
<suppressed ~1 debug messages>

6. Executing Verilog backend.
Dumping module `\UART_synth'.

7. Printing statistics.
