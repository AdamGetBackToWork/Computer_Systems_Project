/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module UART_synth(i_clk, i_Tx_DV, i_Tx_b, i_enable, i_select, o_Tx_active, o_Tx_serial, o_data_sent, o_ready, o_data_recieved);
  wire [2:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire [7:0] _006_;
  wire [2:0] _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  reg [2:0] curr_state = 3'h0;
  input i_Tx_DV;
  input [7:0] i_Tx_b;
  input i_clk;
  input i_enable;
  input i_select;
  output o_Tx_active;
  reg o_Tx_active;
  output o_Tx_serial;
  reg o_Tx_serial;
  output o_data_recieved;
  reg o_data_recieved;
  output o_data_sent;
  reg o_data_sent;
  output o_ready;
  reg o_ready;
  reg [7:0] r_Tx_data = 8'h00;
  reg [2:0] r_bit_index = 3'h0;
  wire [7:0] r_clock_count;
  assign _048_ = ~i_Tx_DV;
  assign _049_ = ~curr_state[1];
  assign _050_ = ~curr_state[0];
  assign _051_ = ~curr_state[2];
  assign _052_ = ~r_bit_index[2];
  assign _053_ = ~r_bit_index[1];
  assign _054_ = ~r_bit_index[0];
  assign _055_ = _049_ & _050_;
  assign _056_ = curr_state[1] | curr_state[0];
  assign _057_ = i_Tx_DV & _051_;
  assign _058_ = _048_ | _056_;
  assign _059_ = _055_ & _057_;
  assign _060_ = curr_state[2] | _058_;
  assign _061_ = o_ready | _055_;
  assign _005_ = _060_ & _061_;
  assign _062_ = curr_state[1] & _051_;
  assign _000_[2] = curr_state[0] & _062_;
  assign _063_ = ~_000_[2];
  assign _064_ = o_data_sent & _056_;
  assign _004_ = _000_[2] | _064_;
  assign _065_ = _050_ & _062_;
  assign _066_ = ~_065_;
  assign _067_ = r_Tx_data[0] | r_bit_index[2];
  assign _068_ = r_Tx_data[4] | _052_;
  assign _069_ = _067_ & _068_;
  assign _070_ = r_bit_index[1] | _069_;
  assign _071_ = i_select & i_enable;
  assign _072_ = ~_071_;
  assign _073_ = _054_ & _071_;
  assign _074_ = _052_ & r_bit_index[1];
  assign _075_ = _052_ | r_Tx_data[6];
  assign _076_ = r_bit_index[2] | r_Tx_data[2];
  assign _077_ = _075_ & _076_;
  assign _078_ = _053_ | _077_;
  assign _079_ = _073_ & _078_;
  assign _080_ = _070_ & _079_;
  assign _081_ = r_bit_index[2] | r_Tx_data[1];
  assign _082_ = _052_ | r_Tx_data[5];
  assign _083_ = _081_ & _082_;
  assign _084_ = r_bit_index[0] & _071_;
  assign _085_ = r_bit_index[2] | r_Tx_data[3];
  assign _086_ = _052_ | r_Tx_data[7];
  assign _087_ = r_bit_index[1] & _086_;
  assign _088_ = _085_ & _087_;
  assign _089_ = _053_ & _083_;
  assign _090_ = _088_ | _089_;
  assign _091_ = _084_ & _090_;
  assign _092_ = _080_ | _091_;
  assign _093_ = _065_ & _092_;
  assign _094_ = _051_ & _071_;
  assign _008_ = curr_state[2] | _072_;
  assign _009_ = o_Tx_serial & _008_;
  assign _010_ = _055_ | _000_[2];
  assign _011_ = _009_ | _010_;
  assign _012_ = _049_ & curr_state[0];
  assign _002_ = _093_ | _011_;
  assign _013_ = o_Tx_active | _059_;
  assign _001_ = _063_ & _013_;
  assign _014_ = i_Tx_b[0] & _059_;
  assign _015_ = r_Tx_data[0] & _060_;
  assign _006_[0] = _014_ | _015_;
  assign _016_ = i_Tx_b[1] & _059_;
  assign _017_ = r_Tx_data[1] & _060_;
  assign _006_[1] = _016_ | _017_;
  assign _018_ = i_Tx_b[2] & _059_;
  assign _019_ = r_Tx_data[2] & _060_;
  assign _006_[2] = _018_ | _019_;
  assign _020_ = i_Tx_b[3] & _059_;
  assign _021_ = r_Tx_data[3] & _060_;
  assign _006_[3] = _020_ | _021_;
  assign _022_ = i_Tx_b[4] & _059_;
  assign _023_ = r_Tx_data[4] & _060_;
  assign _006_[4] = _022_ | _023_;
  assign _024_ = i_Tx_b[5] & _059_;
  assign _025_ = r_Tx_data[5] & _060_;
  assign _006_[5] = _024_ | _025_;
  assign _026_ = i_Tx_b[6] & _059_;
  assign _027_ = r_Tx_data[6] & _060_;
  assign _006_[6] = _026_ | _027_;
  assign _028_ = i_Tx_b[7] & _059_;
  assign _029_ = r_Tx_data[7] & _060_;
  assign _006_[7] = _028_ | _029_;
  assign _030_ = _056_ & _066_;
  assign _031_ = r_bit_index[0] & _030_;
  assign _032_ = r_bit_index[0] ^ _071_;
  assign _033_ = _065_ & _032_;
  assign _007_[0] = _031_ | _033_;
  assign _034_ = r_bit_index[1] & _084_;
  assign _035_ = ~_034_;
  assign _036_ = _065_ & _035_;
  assign _037_ = _030_ | _036_;
  assign _038_ = _065_ & _084_;
  assign _039_ = r_bit_index[1] | _038_;
  assign _007_[1] = _037_ & _039_;
  assign _040_ = r_bit_index[2] & _037_;
  assign _041_ = _074_ & _038_;
  assign _007_[2] = _040_ | _041_;
  assign _042_ = r_bit_index[1] & r_bit_index[0];
  assign _043_ = r_bit_index[2] & _042_;
  assign _044_ = _072_ | _043_;
  assign _045_ = _065_ & _044_;
  assign _000_[0] = _059_ | _045_;
  assign _046_ = _094_ & _012_;
  assign _000_[1] = _065_ | _046_;
  assign _047_ = o_data_recieved & _056_;
  assign _003_ = _059_ | _047_;
  always @(posedge i_clk)
      o_Tx_active <= _001_;
  always @(posedge i_clk)
      o_Tx_serial <= _002_;
  always @(posedge i_clk)
      o_data_sent <= _004_;
  always @(posedge i_clk)
      o_ready <= _005_;
  always @(posedge i_clk)
      o_data_recieved <= _003_;
  always @(posedge i_clk)
      curr_state[0] <= _000_[0];
  always @(posedge i_clk)
      curr_state[1] <= _000_[1];
  always @(posedge i_clk)
      curr_state[2] <= _000_[2];
  always @(posedge i_clk)
      r_bit_index[0] <= _007_[0];
  always @(posedge i_clk)
      r_bit_index[1] <= _007_[1];
  always @(posedge i_clk)
      r_bit_index[2] <= _007_[2];
  always @(posedge i_clk)
      r_Tx_data[0] <= _006_[0];
  always @(posedge i_clk)
      r_Tx_data[1] <= _006_[1];
  always @(posedge i_clk)
      r_Tx_data[2] <= _006_[2];
  always @(posedge i_clk)
      r_Tx_data[3] <= _006_[3];
  always @(posedge i_clk)
      r_Tx_data[4] <= _006_[4];
  always @(posedge i_clk)
      r_Tx_data[5] <= _006_[5];
  always @(posedge i_clk)
      r_Tx_data[6] <= _006_[6];
  always @(posedge i_clk)
      r_Tx_data[7] <= _006_[7];
endmodule
