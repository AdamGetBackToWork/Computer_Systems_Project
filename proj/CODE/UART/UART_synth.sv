/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module UART_synth(i_clk, i_Tx_DV, i_Tx_b, i_enable, i_select, o_Tx_active, o_Tx_serial, o_data_sent, o_ready, o_data_recieved);
  wire [2:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire [7:0] _005_;
  wire [2:0] _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  reg [2:0] curr_state = 3'h0;
  input i_Tx_DV;
  input [7:0] i_Tx_b;
  input i_clk;
  input i_enable;
  input i_select;
  output o_Tx_active;
  output o_Tx_serial;
  reg o_Tx_serial;
  output o_data_recieved;
  reg o_data_recieved;
  output o_data_sent;
  output o_ready;
  reg o_ready;
  reg r_Tx_active = 1'h0;
  reg [7:0] r_Tx_data = 8'h00;
  reg [2:0] r_bit_index = 3'h0;
  wire [7:0] r_clock_count;
  reg r_data_sent = 1'h0;
  assign _052_ = ~i_Tx_DV;
  assign _053_ = ~curr_state[1];
  assign _054_ = ~curr_state[0];
  assign _055_ = ~curr_state[2];
  assign _056_ = ~r_bit_index[2];
  assign _057_ = ~r_bit_index[1];
  assign _058_ = ~r_bit_index[0];
  assign _059_ = ~i_select;
  assign _060_ = ~i_enable;
  assign _061_ = curr_state[1] & _055_;
  assign _062_ = _054_ & _061_;
  assign _063_ = i_select & i_enable;
  assign _064_ = _059_ | _060_;
  assign _065_ = r_bit_index[1] & r_bit_index[0];
  assign _066_ = r_bit_index[2] & _065_;
  assign _067_ = _064_ | _066_;
  assign _068_ = _062_ & _067_;
  assign _069_ = _053_ & _054_;
  assign _070_ = curr_state[1] | curr_state[0];
  assign _071_ = i_Tx_DV & _055_;
  assign _072_ = _052_ | _070_;
  assign _073_ = _069_ & _071_;
  assign _074_ = curr_state[2] | _072_;
  assign _000_[0] = _068_ | _073_;
  assign _075_ = _053_ & curr_state[0];
  assign _076_ = _055_ & _063_;
  assign _077_ = _075_ & _076_;
  assign _000_[1] = _062_ | _077_;
  assign _000_[2] = curr_state[0] & _061_;
  assign _078_ = ~_000_[2];
  assign _079_ = o_data_recieved & _070_;
  assign _002_ = _073_ | _079_;
  assign _080_ = o_ready | _069_;
  assign _003_ = _074_ & _080_;
  assign _081_ = r_bit_index[2] & r_Tx_data[6];
  assign _082_ = _056_ & r_Tx_data[2];
  assign _083_ = r_Tx_data[4] & r_bit_index[2];
  assign _084_ = r_Tx_data[0] & _056_;
  assign _085_ = _083_ | _084_;
  assign _086_ = _057_ | _081_;
  assign _087_ = _082_ | _086_;
  assign _088_ = r_bit_index[1] | _085_;
  assign _089_ = _087_ & _088_;
  assign _090_ = _058_ & _089_;
  assign _091_ = _057_ & r_bit_index[0];
  assign _092_ = r_bit_index[2] & r_Tx_data[5];
  assign _093_ = _056_ & r_Tx_data[1];
  assign _094_ = _092_ | _093_;
  assign _095_ = _091_ & _094_;
  assign _096_ = _056_ | r_Tx_data[7];
  assign _008_ = r_bit_index[2] | r_Tx_data[3];
  assign _009_ = _065_ & _008_;
  assign _010_ = _096_ & _009_;
  assign _011_ = _064_ | _010_;
  assign _012_ = _095_ | _011_;
  assign _013_ = _090_ | _012_;
  assign _014_ = o_Tx_serial | _063_;
  assign _015_ = _062_ & _014_;
  assign _016_ = _013_ & _015_;
  assign _017_ = _064_ & _075_;
  assign _018_ = curr_state[2] | _017_;
  assign _019_ = o_Tx_serial & _018_;
  assign _020_ = _069_ | _000_[2];
  assign _021_ = _019_ | _020_;
  assign _001_ = _016_ | _021_;
  assign _022_ = i_Tx_b[0] & _073_;
  assign _023_ = r_Tx_data[0] & _074_;
  assign _005_[0] = _022_ | _023_;
  assign _024_ = i_Tx_b[1] & _073_;
  assign _025_ = r_Tx_data[1] & _074_;
  assign _005_[1] = _024_ | _025_;
  assign _026_ = i_Tx_b[2] & _073_;
  assign _027_ = r_Tx_data[2] & _074_;
  assign _005_[2] = _026_ | _027_;
  assign _028_ = i_Tx_b[3] & _073_;
  assign _029_ = r_Tx_data[3] & _074_;
  assign _005_[3] = _028_ | _029_;
  assign _030_ = i_Tx_b[4] & _073_;
  assign _031_ = r_Tx_data[4] & _074_;
  assign _005_[4] = _030_ | _031_;
  assign _032_ = i_Tx_b[5] & _073_;
  assign _033_ = r_Tx_data[5] & _074_;
  assign _005_[5] = _032_ | _033_;
  assign _034_ = i_Tx_b[6] & _073_;
  assign _035_ = r_Tx_data[6] & _074_;
  assign _005_[6] = _034_ | _035_;
  assign _036_ = i_Tx_b[7] & _073_;
  assign _037_ = r_Tx_data[7] & _074_;
  assign _005_[7] = _036_ | _037_;
  assign _038_ = r_Tx_active | _073_;
  assign _004_ = _078_ & _038_;
  assign _039_ = r_data_sent & _070_;
  assign _007_ = _000_[2] | _039_;
  assign _040_ = _062_ & _063_;
  assign _041_ = r_bit_index[0] | _040_;
  assign _042_ = r_bit_index[0] & _063_;
  assign _043_ = _062_ & _042_;
  assign _044_ = ~_043_;
  assign _045_ = _070_ & _044_;
  assign _006_[0] = _041_ & _045_;
  assign _046_ = r_bit_index[1] | _043_;
  assign _047_ = r_bit_index[1] & _043_;
  assign _048_ = ~_047_;
  assign _049_ = _070_ & _048_;
  assign _006_[1] = _046_ & _049_;
  assign _050_ = _056_ | _049_;
  assign _051_ = r_bit_index[2] | _047_;
  assign _006_[2] = _050_ & _051_;
  always @(posedge i_clk)
      o_Tx_serial <= _001_;
  always @(posedge i_clk)
      o_ready <= _003_;
  always @(posedge i_clk)
      o_data_recieved <= _002_;
  always @(posedge i_clk)
      curr_state[0] <= _000_[0];
  always @(posedge i_clk)
      curr_state[1] <= _000_[1];
  always @(posedge i_clk)
      curr_state[2] <= _000_[2];
  always @(posedge i_clk)
      r_bit_index[0] <= _006_[0];
  always @(posedge i_clk)
      r_bit_index[1] <= _006_[1];
  always @(posedge i_clk)
      r_bit_index[2] <= _006_[2];
  always @(posedge i_clk)
      r_Tx_data[0] <= _005_[0];
  always @(posedge i_clk)
      r_Tx_data[1] <= _005_[1];
  always @(posedge i_clk)
      r_Tx_data[2] <= _005_[2];
  always @(posedge i_clk)
      r_Tx_data[3] <= _005_[3];
  always @(posedge i_clk)
      r_Tx_data[4] <= _005_[4];
  always @(posedge i_clk)
      r_Tx_data[5] <= _005_[5];
  always @(posedge i_clk)
      r_Tx_data[6] <= _005_[6];
  always @(posedge i_clk)
      r_Tx_data[7] <= _005_[7];
  always @(posedge i_clk)
      r_data_sent <= _007_;
  always @(posedge i_clk)
      r_Tx_active <= _004_;
  assign o_Tx_active = r_Tx_active;
  assign o_data_sent = r_data_sent;
endmodule
