
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: APB.sv
Parsing SystemVerilog input from `APB.sv' to AST representation.
Generating RTLIL representation for module `\APB'.
Note: Assuming pure combinatorial block at APB.sv:37 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \APBrtl

2.2. Analyzing design hierarchy..
Top module:  \APBrtl
Removing unused module `\APB'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \APBrtl

3.1.2. Analyzing design hierarchy..
Top module:  \APBrtl
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$APB.sv:37$1 in module APBrtl.
Marked 9 switch rules as full_case in process $proc$APB.sv:37$1 in module APBrtl.
Marked 1 switch rules as full_case in process $proc$APB.sv:139$17 in module APBrtl.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\APBrtl.$proc$APB.sv:34$19'.
  Set init value: \fb_check = 1'1
Found init rule in `\APBrtl.$proc$APB.sv:35$20'.
  Set init value: \fb = 1'0

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\APBrtl.$proc$APB.sv:37$1'.
     1/39: $4\next_state[1:0]
     2/39: $3\next_state[1:0]
     3/39: $2\PSEL3[0:0]
     4/39: $2\PSEL2[0:0]
     5/39: $2\PSEL1[0:0]
     6/39: $2\PSEL0[0:0]
     7/39: $2\fb_check[0:0]
     8/39: $2\PWDATA[7:0]
     9/39: $2\PWRITE[0:0]
    10/39: $2\next_state[1:0]
    11/39: $4\o_waiting[0:0]
    12/39: $3\o_transfer_done[0:0]
    13/39: $3\o_waiting[0:0]
    14/39: $2\o_transfer_done[0:0]
    15/39: $2\o_waiting[0:0]
    16/39: $1\next_state[1:0]
    17/39: $1\o_transfer_done[0:0]
    18/39: $1\o_waiting[0:0]
    19/39: $1\PWRITE[0:0]
    20/39: $1\PWDATA[7:0]
    21/39: $1\PENABLE[0:0]
    22/39: $1\PSEL3[0:0]
    23/39: $1\PSEL2[0:0]
    24/39: $1\PSEL1[0:0]
    25/39: $1\PSEL0[0:0]
    26/39: $1\fb[0:0]
    27/39: $1\fb_check[0:0]
    28/39: $0\fb[0:0]
    29/39: $0\fb_check[0:0]
    30/39: $0\next_state[1:0]
    31/39: $0\o_transfer_done[0:0]
    32/39: $0\o_waiting[0:0]
    33/39: $0\PWDATA[7:0]
    34/39: $0\PWRITE[0:0]
    35/39: $0\PENABLE[0:0]
    36/39: $0\PSEL3[0:0]
    37/39: $0\PSEL2[0:0]
    38/39: $0\PSEL1[0:0]
    39/39: $0\PSEL0[0:0]
Creating decoders for process `\APBrtl.$proc$APB.sv:139$17'.
     1/2: $1\curr_state[1:0]
     2/2: $0\curr_state[1:0]
Creating decoders for process `\APBrtl.$proc$APB.sv:34$19'.
     1/1: $3\fb_check[0:0]
Creating decoders for process `\APBrtl.$proc$APB.sv:35$20'.
     1/1: $2\fb[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\APBrtl.\next_state' from process `\APBrtl.$proc$APB.sv:37$1'.
Latch inferred for signal `\APBrtl.\PSEL0' from process `\APBrtl.$proc$APB.sv:37$1': $auto$proc_dlatch.cc:409:proc_dlatch$229
Latch inferred for signal `\APBrtl.\PSEL1' from process `\APBrtl.$proc$APB.sv:37$1': $auto$proc_dlatch.cc:409:proc_dlatch$246
Latch inferred for signal `\APBrtl.\PSEL2' from process `\APBrtl.$proc$APB.sv:37$1': $auto$proc_dlatch.cc:409:proc_dlatch$263
Latch inferred for signal `\APBrtl.\PSEL3' from process `\APBrtl.$proc$APB.sv:37$1': $auto$proc_dlatch.cc:409:proc_dlatch$280
Latch inferred for signal `\APBrtl.\PENABLE' from process `\APBrtl.$proc$APB.sv:37$1': $auto$proc_dlatch.cc:409:proc_dlatch$303
Latch inferred for signal `\APBrtl.\PWRITE' from process `\APBrtl.$proc$APB.sv:37$1': $auto$proc_dlatch.cc:409:proc_dlatch$320
Latch inferred for signal `\APBrtl.\PWDATA' from process `\APBrtl.$proc$APB.sv:37$1': $auto$proc_dlatch.cc:409:proc_dlatch$337
Latch inferred for signal `\APBrtl.\o_waiting' from process `\APBrtl.$proc$APB.sv:37$1': $auto$proc_dlatch.cc:409:proc_dlatch$424
Latch inferred for signal `\APBrtl.\o_transfer_done' from process `\APBrtl.$proc$APB.sv:37$1': $auto$proc_dlatch.cc:409:proc_dlatch$441
Latch inferred for signal `\APBrtl.\fb_check' from process `\APBrtl.$proc$APB.sv:37$1': $auto$proc_dlatch.cc:409:proc_dlatch$452
Latch inferred for signal `\APBrtl.\fb' from process `\APBrtl.$proc$APB.sv:37$1': $auto$proc_dlatch.cc:409:proc_dlatch$463

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\APBrtl.\curr_state' using process `\APBrtl.$proc$APB.sv:139$17'.
  created $dff cell `$procdff$464' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 9 empty switches in `\APBrtl.$proc$APB.sv:37$1'.
Removing empty process `APBrtl.$proc$APB.sv:37$1'.
Found and cleaned up 1 empty switch in `\APBrtl.$proc$APB.sv:139$17'.
Removing empty process `APBrtl.$proc$APB.sv:139$17'.
Removing empty process `APBrtl.$proc$APB.sv:34$19'.
Removing empty process `APBrtl.$proc$APB.sv:35$20'.
Cleaned up 10 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.
<suppressed ~109 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..
Removed 13 unused cells and 158 unused wires.
<suppressed ~14 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module APBrtl..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
<suppressed ~216 debug messages>
Removed a total of 72 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \APBrtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$26.
    dead port 2/2 on $mux $procmux$28.
    dead port 2/2 on $mux $procmux$34.
    dead port 2/2 on $mux $procmux$99.
Removed 4 multiplexer ports.
<suppressed ~12 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \APBrtl.
    New input vector for $reduce_or cell $auto$proc_dlatch.cc:247:make_hold$420: { $auto$rtlil.cc:1862:And$349 $auto$rtlil.cc:1862:And$419 }
    New ctrl vector for $pmux cell $procmux$160: $procmux$156_CMP
    New ctrl vector for $pmux cell $procmux$165: $procmux$156_CMP
    New ctrl vector for $pmux cell $procmux$170: $procmux$156_CMP
    New ctrl vector for $pmux cell $procmux$175: $procmux$156_CMP
    New ctrl vector for $pmux cell $procmux$179: $procmux$155_CMP
    New ctrl vector for $pmux cell $procmux$185: $procmux$156_CMP
    New ctrl vector for $pmux cell $procmux$190: $procmux$156_CMP
    New ctrl vector for $pmux cell $procmux$195: $procmux$156_CMP
    New ctrl vector for $pmux cell $procmux$200: $procmux$156_CMP
    New ctrl vector for $pmux cell $procmux$38: $procmux$39_CMP
    New ctrl vector for $pmux cell $procmux$47: $procmux$40_CMP
    New ctrl vector for $pmux cell $procmux$56: $procmux$41_CMP
    New ctrl vector for $pmux cell $procmux$65: $auto$opt_reduce.cc:132:opt_mux$466
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$465: { $procmux$39_CMP $procmux$40_CMP $procmux$41_CMP }
  Optimizing cells in module \APBrtl.
Performed a total of 15 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..
Removed 1 unused cells and 77 unused wires.
<suppressed ~2 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \APBrtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \APBrtl.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell APBrtl.$procmux$41_CMP0 ($eq).
Removed top 1 bits (of 2) from mux cell APBrtl.$procmux$97 ($mux).
Removed top 1 bits (of 2) from port B of cell APBrtl.$procmux$156_CMP0 ($eq).
Removed top 1 bits (of 2) from wire APBrtl.$2\next_state[1:0].

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~52 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module APBrtl:
  created 0 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \APBrtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \APBrtl.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.

3.13.9. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register APBrtl.curr_state.

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\curr_state' from module `\APBrtl'.
  found $dff cell for state register: $procdff$464
  root of input selection tree: $0\curr_state[1:0]
  found reset state: 2'00 (guessed from mux tree)
  found ctrl input: \PRESET
  found state code: 2'00
  found ctrl input: $auto$rtlil.cc:1832:Not$462
  found ctrl input: $auto$rtlil.cc:1832:Not$451
  found ctrl input: $procmux$100_CMP
  found ctrl input: $and$APB.sv:128$16_Y
  found ctrl input: \PREADY
  found state code: 2'10
  found state code: 2'01
  found ctrl input: $and$APB.sv:67$12_Y
  found ctrl output: $procmux$100_CMP
  found ctrl output: $auto$rtlil.cc:1832:Not$462
  found ctrl output: $auto$rtlil.cc:1832:Not$451
  ctrl inputs: { $and$APB.sv:128$16_Y $and$APB.sv:67$12_Y \PREADY \PRESET }
  ctrl outputs: { $auto$rtlil.cc:1832:Not$462 $auto$rtlil.cc:1832:Not$451 $procmux$100_CMP $0\curr_state[1:0] }
  transition:       2'00 4'---0 ->       2'00 5'00100
  transition:       2'00 4'-0-1 ->       2'00 5'00100
  transition:       2'00 4'-1-1 ->       2'01 5'00101
  transition:       2'10 4'---0 ->       2'00 5'10000
  transition:       2'10 4'0-01 ->       2'10 5'10010
  transition:       2'10 4'0-11 ->       2'00 5'10000
  transition:       2'10 4'1--1 ->       2'01 5'10001
  transition:       2'01 4'---0 ->       2'00 5'01000
  transition:       2'01 4'---1 ->       2'10 5'01010

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\curr_state$468' from module `\APBrtl'.

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..
Removed 9 unused cells and 9 unused wires.
<suppressed ~11 debug messages>

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\curr_state$468' from module `\APBrtl'.
  Removing unused output signal $0\curr_state[1:0] [0].
  Removing unused output signal $0\curr_state[1:0] [1].

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\curr_state$468' from module `\APBrtl' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> --1
  10 -> -1-
  01 -> 1--

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\curr_state$468' from module `\APBrtl':
-------------------------------------

  Information on FSM $fsm$\curr_state$468 (\curr_state):

  Number of input signals:    4
  Number of output signals:   3
  Number of state bits:       3

  Input signals:
    0: \PRESET
    1: \PREADY
    2: $and$APB.sv:67$12_Y
    3: $and$APB.sv:128$16_Y

  Output signals:
    0: $procmux$100_CMP
    1: $auto$rtlil.cc:1832:Not$451
    2: $auto$rtlil.cc:1832:Not$462

  State encoding:
    0:      3'--1  <RESET STATE>
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 4'---0   ->     0 3'001
      1:     0 4'-0-1   ->     0 3'001
      2:     0 4'-1-1   ->     2 3'001
      3:     1 4'---0   ->     0 3'100
      4:     1 4'0-11   ->     0 3'100
      5:     1 4'0-01   ->     1 3'100
      6:     1 4'1--1   ->     2 3'100
      7:     2 4'---0   ->     0 3'010
      8:     2 4'---1   ->     1 3'010

-------------------------------------

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\curr_state$468' from module `\APBrtl'.

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.
<suppressed ~2 debug messages>

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.
<suppressed ~15 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \APBrtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \APBrtl.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$465: { $2\PSEL1[0:0] $2\PSEL2[0:0] $2\PSEL3[0:0] }
    New input vector for $reduce_or cell $auto$fsm_map.cc:144:implement_pattern_cache$496: { $auto$fsm_map.cc:118:implement_pattern_cache$490 $auto$fsm_map.cc:118:implement_pattern_cache$494 }
    New input vector for $reduce_or cell $auto$fsm_map.cc:144:implement_pattern_cache$487: { $auto$fsm_map.cc:118:implement_pattern_cache$481 $auto$fsm_map.cc:118:implement_pattern_cache$485 $auto$fsm_map.cc:74:implement_pattern_cache$477 }
  Optimizing cells in module \APBrtl.
Performed a total of 3 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.

3.20.9. Rerunning OPT passes. (Maybe there is more to do..)

3.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \APBrtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \APBrtl.
Performed a total of 0 changes.

3.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
Removed a total of 0 cells.

3.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..

3.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.

3.20.16. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dlatch.
No more expansions possible.
<suppressed ~80 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.
<suppressed ~6 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..
Removed 0 unused cells and 17 unused wires.
<suppressed ~1 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\APBrtl' to `<abc-temp-dir>/input.blif'..
Extracted 100 gates and 123 wires to a netlist network with 21 inputs and 21 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        7
ABC RESULTS:              OAI3 cells:        4
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:       13
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:        internal signals:       81
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       21
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module APBrtl.
<suppressed ~1 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APBrtl'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..
Removed 0 unused cells and 110 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \APBrtl

3.25.2. Analyzing design hierarchy..
Top module:  \APBrtl
Removed 0 unused modules.

3.26. Printing statistics.

=== APBrtl ===

   Number of wires:                 79
   Number of wire bits:            103
   Number of public wires:          21
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 86
     $_ANDNOT_                      17
     $_AND_                          1
     $_AOI3_                         2
     $_DFF_P_                        3
     $_DLATCH_P_                    18
     $_MUX_                          1
     $_NAND_                         4
     $_NOR_                          1
     $_NOT_                          7
     $_OAI3_                         4
     $_OAI4_                         2
     $_ORNOT_                       13
     $_OR_                          13

3.27. Executing CHECK pass (checking for obvious problems).
checking module APBrtl..
found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `\APBrtl' to `<abc-temp-dir>/input.blif'..
Extracted 65 gates and 86 wires to a netlist network with 21 inputs and 21 outputs.

4.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       36
ABC RESULTS:               NOT cells:       13
ABC RESULTS:                OR cells:       11
ABC RESULTS:        internal signals:       44
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       21
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APBrtl..
Removed 0 unused cells and 86 unused wires.
<suppressed ~1 debug messages>

6. Executing Verilog backend.
Dumping module `\APBrtl'.

7. Printing statistics.

=== APBrtl ===

   Number of wires:                 74
   Number of wire bits:             98
   Number of public wires:          21
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 81
     $_AND_                         36
     $_DFF_P_                        3
     $_DLATCH_P_                    18
     $_NOT_                         13
     $_OR_                          11

End of script. Logfile hash: e6d4f79099
CPU: user 0.33s system 0.02s, MEM: 16.98 MB total, 11.12 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 21% 16x opt_clean (0 sec), 17% 13x opt_expr (0 sec), ...
