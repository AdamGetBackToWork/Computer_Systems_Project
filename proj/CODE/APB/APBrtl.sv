/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module APBrtl(PCLK, PRESET, PSEL0, PSEL1, PSEL2, PSEL3, PENABLE, PWRITE, PWDATA, PREADY, PRDATA, i_data, i_data_ready, i_alu_error, i_data_check, i_protocol_sel, o_waiting, o_transfer_done);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire [7:0] _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  input PCLK;
  output PENABLE;
  input PRDATA;
  input PREADY;
  input PRESET;
  output PSEL0;
  output PSEL1;
  output PSEL2;
  output PSEL3;
  output [7:0] PWDATA;
  output PWRITE;
  reg [2:0] curr_state;
  wire fb;
  wire fb_check;
  input i_alu_error;
  input [7:0] i_data;
  input i_data_check;
  input i_data_ready;
  input [1:0] i_protocol_sel;
  output o_transfer_done;
  output o_waiting;
  assign _015_ = ~PRESET;
  assign _016_ = ~i_alu_error;
  assign _017_ = ~PREADY;
  assign _018_ = ~i_data_check;
  assign _019_ = ~curr_state[2];
  assign _020_ = ~i_protocol_sel[1];
  assign _021_ = ~i_protocol_sel[0];
  assign _022_ = fb_check & PREADY;
  assign _023_ = o_waiting | _022_;
  assign _024_ = PRESET & _023_;
  assign _025_ = i_data_check | _024_;
  assign _026_ = ~_025_;
  assign _027_ = i_data_ready & _016_;
  assign _028_ = i_data_check | _027_;
  assign _029_ = ~_028_;
  assign _030_ = PREADY & _028_;
  assign _031_ = ~_030_;
  assign _032_ = _025_ & _030_;
  assign _033_ = _026_ | _031_;
  assign _034_ = curr_state[0] & _033_;
  assign _035_ = curr_state[1] & PREADY;
  assign _036_ = _029_ & _035_;
  assign _037_ = _015_ | _036_;
  assign _008_ = _034_ | _037_;
  assign _038_ = PRESET & curr_state[0];
  assign _039_ = ~_038_;
  assign _040_ = _032_ & _038_;
  assign _041_ = PRESET & _035_;
  assign _042_ = _028_ & _041_;
  assign _010_ = _040_ | _042_;
  assign _043_ = curr_state[1] & _017_;
  assign _044_ = curr_state[2] | _043_;
  assign _009_ = PRESET & _044_;
  assign _045_ = i_alu_error & _022_;
  assign _046_ = ~_045_;
  assign _047_ = PRESET & _019_;
  assign _048_ = fb & _047_;
  assign _006_ = _046_ & _048_;
  assign _007_ = _019_ & _024_;
  assign _049_ = i_data_check & curr_state[2];
  assign _005_ = ~_049_;
  assign _050_ = _018_ & curr_state[2];
  assign _004_[0] = i_data[0] & _050_;
  assign _004_[1] = i_data[1] & _050_;
  assign _004_[2] = i_data[2] & _050_;
  assign _004_[3] = i_data[3] & _050_;
  assign _004_[4] = i_data[4] & _050_;
  assign _004_[5] = i_data[5] & _050_;
  assign _004_[6] = i_data[6] & _050_;
  assign _004_[7] = i_data[7] & _050_;
  assign _011_ = curr_state[0] | curr_state[2];
  assign _012_ = curr_state[1] | _011_;
  assign _051_ = _022_ | _039_;
  assign _013_ = _011_ & _051_;
  assign _052_ = curr_state[2] & i_protocol_sel[1];
  assign _003_ = i_protocol_sel[0] & _052_;
  assign _002_ = _021_ & _052_;
  assign _014_ = curr_state[2] & _020_;
  assign _001_ = i_protocol_sel[0] & _014_;
  assign _000_ = _021_ & _014_;
  always @(posedge PCLK)
      curr_state[0] <= _008_;
  always @(posedge PCLK)
      curr_state[1] <= _009_;
  always @(posedge PCLK)
      curr_state[2] <= _010_;
  \$_DLATCH_P_  _116_ (
    .D(_000_),
    .E(_011_),
    .Q(PSEL0)
  );
  \$_DLATCH_P_  _117_ (
    .D(_001_),
    .E(_011_),
    .Q(PSEL1)
  );
  \$_DLATCH_P_  _118_ (
    .D(_002_),
    .E(_011_),
    .Q(PSEL2)
  );
  \$_DLATCH_P_  _119_ (
    .D(_003_),
    .E(_011_),
    .Q(PSEL3)
  );
  \$_DLATCH_P_  _120_ (
    .D(curr_state[1]),
    .E(_012_),
    .Q(PENABLE)
  );
  \$_DLATCH_P_  _121_ (
    .D(_005_),
    .E(_011_),
    .Q(PWRITE)
  );
  \$_DLATCH_P_  _122_ (
    .D(_004_[0]),
    .E(_011_),
    .Q(PWDATA[0])
  );
  \$_DLATCH_P_  _123_ (
    .D(_004_[1]),
    .E(_011_),
    .Q(PWDATA[1])
  );
  \$_DLATCH_P_  _124_ (
    .D(_004_[2]),
    .E(_011_),
    .Q(PWDATA[2])
  );
  \$_DLATCH_P_  _125_ (
    .D(_004_[3]),
    .E(_011_),
    .Q(PWDATA[3])
  );
  \$_DLATCH_P_  _126_ (
    .D(_004_[4]),
    .E(_011_),
    .Q(PWDATA[4])
  );
  \$_DLATCH_P_  _127_ (
    .D(_004_[5]),
    .E(_011_),
    .Q(PWDATA[5])
  );
  \$_DLATCH_P_  _128_ (
    .D(_004_[6]),
    .E(_011_),
    .Q(PWDATA[6])
  );
  \$_DLATCH_P_  _129_ (
    .D(_004_[7]),
    .E(_011_),
    .Q(PWDATA[7])
  );
  \$_DLATCH_P_  _130_ (
    .D(_007_),
    .E(_013_),
    .Q(o_waiting)
  );
  \$_DLATCH_P_  _131_ (
    .D(_006_),
    .E(_011_),
    .Q(o_transfer_done)
  );
  \$_DLATCH_P_  _132_ (
    .D(i_data_check),
    .E(curr_state[2]),
    .Q(fb_check)
  );
  \$_DLATCH_P_  _133_ (
    .D(PRDATA),
    .E(curr_state[1]),
    .Q(fb)
  );
endmodule
