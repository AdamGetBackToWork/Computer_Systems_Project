/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module APBrtl(PCLK, PRESET, PSEL0, PSEL1, PSEL2, PSEL3, PENABLE, PWRITE, PWDATA, PREADY, PRDATA, i_data, i_data_ready, i_alu_error, i_data_check, i_protocol_sel, o_waiting, o_transfer_done);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  input PCLK;
  output PENABLE;
  input PRDATA;
  input PREADY;
  input PRESET;
  output PSEL0;
  output PSEL1;
  output PSEL2;
  output PSEL3;
  output [7:0] PWDATA;
  output PWRITE;
  reg [2:0] curr_state;
  input i_alu_error;
  input [7:0] i_data;
  input i_data_check;
  input i_data_ready;
  input [1:0] i_protocol_sel;
  output o_transfer_done;
  output o_waiting;
  assign _03_ = ~i_data_ready;
  assign _04_ = ~i_data_check;
  assign _05_ = ~PREADY;
  assign _06_ = ~PRESET;
  assign _07_ = ~i_protocol_sel[1];
  assign _08_ = ~i_protocol_sel[0];
  assign _09_ = _03_ | i_alu_error;
  assign _10_ = ~_09_;
  assign _11_ = PRESET & _10_;
  assign _12_ = _06_ | _09_;
  assign _13_ = _04_ & _12_;
  assign _14_ = i_data_check | _11_;
  assign _15_ = curr_state[0] | curr_state[1];
  assign _16_ = PREADY & PRESET;
  assign _17_ = _15_ & _16_;
  assign _02_ = _14_ & _17_;
  assign _18_ = _05_ | _13_;
  assign _19_ = curr_state[0] & _18_;
  assign _20_ = curr_state[1] & PREADY;
  assign _21_ = _04_ & _20_;
  assign _22_ = _09_ & _21_;
  assign _23_ = _06_ | _22_;
  assign _00_ = _19_ | _23_;
  assign _24_ = curr_state[1] & _05_;
  assign _25_ = curr_state[2] | _24_;
  assign _01_ = PRESET & _25_;
  assign _26_ = _04_ & curr_state[2];
  assign PWDATA[0] = i_data[0] & _26_;
  assign PWDATA[1] = i_data[1] & _26_;
  assign PWDATA[2] = i_data[2] & _26_;
  assign PWDATA[3] = i_data[3] & _26_;
  assign PWDATA[4] = i_data[4] & _26_;
  assign PWDATA[5] = i_data[5] & _26_;
  assign PWDATA[6] = i_data[6] & _26_;
  assign PWDATA[7] = i_data[7] & _26_;
  assign PWRITE = curr_state[0] | _26_;
  assign o_waiting = curr_state[0] & _16_;
  assign _27_ = curr_state[2] & i_protocol_sel[1];
  assign PSEL3 = i_protocol_sel[0] & _27_;
  assign PSEL2 = _08_ & _27_;
  assign _28_ = curr_state[2] & _07_;
  assign PSEL1 = i_protocol_sel[0] & _28_;
  assign PSEL0 = _08_ & _28_;
  always @(posedge PCLK)
      curr_state[0] <= _00_;
  always @(posedge PCLK)
      curr_state[1] <= _01_;
  always @(posedge PCLK)
      curr_state[2] <= _02_;
  assign PENABLE = curr_state[1];
  assign o_transfer_done = 1'h0;
endmodule
